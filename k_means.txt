import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def initialize_centroids(X, k):
    indices = np.random.choice(X.shape[0], k, replace=False)
    return X[indices]

def assign_clusters(X, centroids):
    distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)
    return np.argmin(distances, axis=1)

def update_centroids(X, labels, k):
    new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])
    return new_centroids

def k_means(X, k, max_iters=100):
    centroids = initialize_centroids(X, k)
    for i in range(max_iters):
        labels = assign_clusters(X, centroids)
        new_centroids = update_centroids(X, labels, k)
        if np.all(centroids == new_centroids):
            break
        centroids = new_centroids
    # Calculate the sum of squared distances (inertia)
    inertia = np.sum((X - centroids[labels])**2)
    return centroids, labels, i+1, inertia  # Include inertia in the return values

if __name__ == '__main__':
    # Load data from a CSV file
    file_path = 'D:\\Third Year\\DWDM_Lab\\user_behavior_dataset.csv'
    data = pd.read_csv(file_path)

    # Select numeric columns and drop rows with missing values
    data = data.select_dtypes(include=[np.number]).dropna()

    # Convert data to a NumPy array
    X = data.values

    # Number of clusters for final K-means clustering
    k = 3

    # Elbow curve calculation
    max_k = 10
    inertias = []
    for k_val in range(1, max_k + 1):
        _, _, _, inertia = k_means(X, k_val)
        inertias.append(inertia)

    # Plot elbow curve
    plt.figure(figsize=(8, 5))
    plt.plot(range(1, max_k + 1), inertias, marker='o', linestyle='--')
    plt.title('Elbow Curve')
    plt.xlabel('Number of Clusters (k)')
    plt.ylabel('Inertia (Sum of Squared Distances)')
    plt.grid()
    plt.show()

    # Perform final K-means clustering
    centroids, labels, iterations, _ = k_means(X, k)

    # Display summary
    print("K-means Clustering Summary")
    print("--------------------------")
    print(f"Number of clusters: {k}")
    print(f"Number of iterations: {iterations}")
    print("\nCentroids:")
    for idx, centroid in enumerate(centroids):
        print(f"Centroid {idx + 1}: {centroid}")

    print("\nCluster Sizes:")
    for cluster in range(k):
        size = np.sum(labels == cluster)
        print(f"Cluster {cluster + 1}: {size} data points")

    # Plot the clustering results
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
    plt.scatter(centroids[:, 0], centroids[:, 1], s=300, c='red', marker='X')
    plt.title('K-means Clustering')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.show()
