import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

if __name__ == '__main__':
    # Load data from a CSV file
    file_path = 'D:\\Third Year\\DWDM_Lab\\user_behavior_dataset.csv'
    data = pd.read_csv(file_path)

    # Select numeric columns and drop rows with missing values
    data = data.select_dtypes(include=[np.number]).dropna()

    # Convert data to a NumPy array
    X = data.values

    # Standardize the data (optional, improves clustering performance)
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Elbow curve calculation
    max_k = 10
    inertias = []
    for k in range(1, max_k + 1):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(X_scaled)
        inertias.append(kmeans.inertia_)

    # Plot elbow curve
    plt.figure(figsize=(8, 5))
    plt.plot(range(1, max_k + 1), inertias, marker='o', linestyle='--')
    plt.title('Elbow Curve')
    plt.xlabel('Number of Clusters (k)')
    plt.ylabel('Inertia (Sum of Squared Distances)')
    plt.grid()
    plt.show()

    # Perform final K-means clustering with chosen k (e.g., 3)
    k = 3
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)

    # Get cluster labels and centroids
    labels = kmeans.labels_
    centroids = kmeans.cluster_centers_

    # Display summary
    print("K-means Clustering Summary")
    print("--------------------------")
    print(f"Number of clusters: {k}")
    print(f"Number of iterations: {kmeans.n_iter_}")
    print("\nCentroids (scaled):")
    for idx, centroid in enumerate(centroids):
        print(f"Centroid {idx + 1}: {centroid}")

    print("\nCluster Sizes:")
    for cluster in range(k):
        size = np.sum(labels == cluster)
        print(f"Cluster {cluster + 1}: {size} data points")

    # Plot the clustering results
    plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=labels, cmap='viridis')
    plt.scatter(centroids[:, 0], centroids[:, 1], s=300, c='red', marker='X')
    plt.title('K-means Clustering')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.show()
